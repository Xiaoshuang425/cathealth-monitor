console.log(" CatHealth Monitor 前端加载完成");

document.addEventListener("DOMContentLoaded", function() {
    console.log("DOM 加载完成，初始化事件监听器");
    initializeApp();
});

function initializeApp() {
    const showRegisterBtn = document.getElementById("show-register");
    const showLoginBtn = document.getElementById("show-login");
    const loginTogglePassword = document.getElementById("login-toggle-password");
    const registerTogglePassword = document.getElementById("register-toggle-password");
    const loginForm = document.getElementById("login-form");
    const registerForm = document.getElementById("register-form");

    if (!showRegisterBtn || !showLoginBtn) {
        console.error(" 找不到必要的DOM元素");
        return;
    }

    console.log(" 所有DOM元素加载成功");

    showRegisterBtn.addEventListener("click", function(e) {
        e.preventDefault();
        console.log("切换到注册表单");
        document.getElementById("login-card").classList.add("hidden");
        document.getElementById("register-card").classList.remove("hidden");
        clearMessages();
    });

    showLoginBtn.addEventListener("click", function(e) {
        e.preventDefault();
        console.log("切换到登录表单");
        document.getElementById("register-card").classList.add("hidden");
        document.getElementById("login-card").classList.remove("hidden");
        clearMessages();
    });

    if (loginTogglePassword) {
        loginTogglePassword.addEventListener("click", function() {
            const passwordInput = document.getElementById("login-password");
            togglePasswordVisibility(passwordInput, this);
        });
    }

    if (registerTogglePassword) {
        registerTogglePassword.addEventListener("click", function() {
            const passwordInput = document.getElementById("register-password");
            togglePasswordVisibility(passwordInput, this);
        });
    }

    if (loginForm) {
        loginForm.addEventListener("submit", async function(e) {
            e.preventDefault();
            console.log("登录表单提交");
            
            const email = document.getElementById("login-email").value;
            const password = document.getElementById("login-password").value;
            
            if (!email || !password) {
                showMessage("请填写邮箱和密码", "error");
                return;
            }
            
            await loginUser(email, password);
        });
    }

    if (registerForm) {
        registerForm.addEventListener("submit", async function(e) {
            e.preventDefault();
            console.log("注册表单提交");
            
            const name = document.getElementById("register-name").value;
            const email = document.getElementById("register-email").value;
            const password = document.getElementById("register-password").value;
            const confirmPassword = document.getElementById("register-confirm-password").value;
            
            if (!name || !email || !password) {
                showMessage("请填写所有必填字段", "error");
                return;
            }
            
            if (password !== confirmPassword) {
                showMessage("两次输入的密码不一致", "error");
                return;
            }
            
            if (password.length < 6) {
                showMessage("密码长度至少6位", "error");
                return;
            }
            
            await registerUser(name, email, password);
        });
    }

    checkLoginStatus();
}

function togglePasswordVisibility(input, icon) {
    const type = input.type === "password" ? "text" : "password";
    input.type = type;
    icon.classList.toggle("fa-eye");
    icon.classList.toggle("fa-eye-slash");
}

async function loginUser(email, password) {
    try {
        showMessage("登录中...", "info");
        
        const response = await fetch("/api/auth/login", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ email, password })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showMessage("登录成功！", "success");
            console.log("登录成功:", data.user);
            
            localStorage.setItem("token", data.token);
            localStorage.setItem("user", JSON.stringify(data.user));
            
            setTimeout(() => {
                showDashboard(data.user);
            }, 1000);
            
        } else {
            showMessage(data.error || "登录失败", "error");
        }
        
    } catch (error) {
        console.error("登录错误:", error);
        showMessage("网络错误，请稍后重试", "error");
    }
}

async function registerUser(name, email, password) {
    try {
        showMessage("注册中...", "info");
        
        const response = await fetch("/api/auth/register", {
            method: "POST",
            headers: {
                "Content-Type": "application/json",
            },
            body: JSON.stringify({ name, email, password })
        });
        
        const data = await response.json();
        
        if (data.success) {
            showMessage("注册成功！正在跳转到登录...", "success");
            console.log("注册成功:", data.user);
            
            setTimeout(() => {
                document.getElementById("register-card").classList.add("hidden");
                document.getElementById("login-card").classList.remove("hidden");
                document.getElementById("login-email").value = email;
                clearMessages();
            }, 2000);
            
        } else {
            showMessage(data.error || "注册失败", "error");
        }
        
    } catch (error) {
        console.error("注册错误:", error);
        showMessage("网络错误，请稍后重试", "error");
    }
}

function showDashboard(user) {
    console.log("显示仪表盘:", user);
    
    document.body.innerHTML = `
        <div class="container">
            <nav class="navbar">
                <div class="nav-brand">
                    <i class="fas fa-cat"></i>
                    <span>CatHealth Monitor</span>
                </div>
                <div class="nav-user">
                    <span>欢迎，${user.name}</span>
                    <button class="btn-logout" onclick="logout()">退出</button>
                </div>
            </nav>

            <div class="dashboard">
                <div class="sidebar">
                    <div class="sidebar-menu">
                        <button class="menu-item active" onclick="showSection('home')">
                            <i class="fas fa-home"></i>
                            <span>首页</span>
                        </button>
                        <button class="menu-item" onclick="showSection('analysis')">
                            <i class="fas fa-camera"></i>
                            <span>健康分析</span>
                        </button>
                        <button class="menu-item" onclick="showSection('cats')">
                            <i class="fas fa-paw"></i>
                            <span>我的猫咪</span>
                        </button>
                        <button class="menu-item" onclick="showSection('history')">
                            <i class="fas fa-history"></i>
                            <span>分析历史</span>
                        </button>
                    </div>
                </div>

                <div class="main-content">
                    <div class="content-section active" id="home-section">
                        <div class="welcome-card">
                            <h1>欢迎回来，${user.name}！</h1>
                            <p>今天也要关注猫咪的健康状况哦 </p>
                        </div>

                        <div class="quick-actions">
                            <h2>快速操作</h2>
                            <div class="action-grid">
                                <div class="action-card" onclick="showSection('analysis')">
                                    <div class="action-icon">
                                        <i class="fas fa-camera"></i>
                                    </div>
                                    <h3>健康分析</h3>
                                    <p>上传排泄物照片进行AI分析</p>
                                </div>
                                <div class="action-card" onclick="showSection('cats')">
                                    <div class="action-icon">
                                        <i class="fas fa-plus"></i>
                                    </div>
                                    <h3>添加猫咪</h3>
                                    <p>为您的爱宠创建健康档案</p>
                                </div>
                                <div class="action-card" onclick="showSection('history')">
                                    <div class="action-icon">
                                        <i class="fas fa-history"></i>
                                    </div>
                                    <h3>查看历史</h3>
                                    <p>查看过往的健康分析记录</p>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="content-section" id="analysis-section">
                        <div class="analysis-header">
                            <h2><i class="fas fa-camera"></i> AI健康分析</h2>
                            <p>上传猫咪排泄物照片，使用YOLO模型进行智能分析</p>
                        </div>

                        <div class="analysis-container">
                            <div class="upload-section">
                                <div class="upload-card" id="upload-area">
                                    <div class="upload-icon">
                                        <i class="fas fa-cloud-upload-alt"></i>
                                    </div>
                                    <h3>上传排泄物照片</h3>
                                    <p>支持 JPG、PNG 格式，最大 5MB</p>
                                    <input type="file" id="image-upload" accept="image/*" hidden>
                                    <button class="btn-upload" onclick="document.getElementById('image-upload').click()">
                                        选择图片
                                    </button>
                                </div>
                                
                                <div class="preview-card hidden" id="preview-area">
                                    <div class="preview-header">
                                        <h4>图片预览</h4>
                                        <button class="btn-remove" onclick="removeImage()">
                                            <i class="fas fa-times"></i>
                                        </button>
                                    </div>
                                    <div class="preview-image">
                                        <img id="preview-img" src="" alt="预览图片">
                                    </div>
                                    <button class="btn-analyze" onclick="analyzeImage()">
                                        <i class="fas fa-robot"></i> 开始AI分析
                                    </button>
                                </div>
                            </div>

                            <div class="result-section hidden" id="result-area">
                                <div class="result-header">
                                    <h3><i class="fas fa-chart-bar"></i> 分析结果</h3>
                                </div>
                                
                                <div class="result-content">
                                    <div class="result-overview">
                                        <div class="risk-level" id="risk-level">
                                            <div class="risk-icon">
                                                <i class="fas fa-check-circle"></i>
                                            </div>
                                            <div class="risk-info">
                                                <h4 id="risk-title">健康状况良好</h4>
                                                <p id="risk-desc">未检测到明显异常</p>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="result-details">
                                        <div class="detail-card">
                                            <h5>检测特征</h5>
                                            <div class="detail-list">
                                                <div class="detail-item">
                                                    <span class="detail-label">颜色分析</span>
                                                    <span class="detail-value" id="color-result">-</span>
                                                </div>
                                                <div class="detail-item">
                                                    <span class="detail-label">质地分析</span>
                                                    <span class="detail-value" id="texture-result">-</span>
                                                </div>
                                                <div class="detail-item">
                                                    <span class="detail-label">形状分析</span>
                                                    <span class="detail-value" id="shape-result">-</span>
                                                </div>
                                                <div class="detail-item">
                                                    <span class="detail-label">置信度</span>
                                                    <span class="detail-value" id="confidence-result">-</span>
                                                </div>
                                            </div>
                                        </div>

                                        <div class="recommendation-card">
                                            <h5>健康建议</h5>
                                            <div class="recommendation-content" id="recommendation-content">
                                                <p>请保持当前的喂养习惯，继续观察猫咪的健康状况。</p>
                                            </div>
                                        </div>
                                    </div>

                                    <div class="result-actions">
                                        <button class="btn-save" onclick="saveAnalysis()">
                                            <i class="fas fa-save"></i> 保存记录
                                        </button>
                                        <button class="btn-new" onclick="newAnalysis()">
                                            <i class="fas fa-plus"></i> 新的分析
                                        </button>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>

                    <div class="content-section" id="cats-section">
                        <h2>我的猫咪</h2>
                        <p>猫咪管理功能开发中...</p>
                    </div>

                    <div class="content-section" id="history-section">
                        <h2>分析历史</h2>
                        <p>历史记录功能开发中...</p>
                    </div>
                </div>
            </div>
        </div>

        <style>
            .navbar {
                background: #F8F4E9;
                border-bottom: 1px solid #E8D0B3;
                padding: 15px 30px;
                display: flex;
                justify-content: space-between;
                align-items: center;
            }
            
            .nav-brand {
                display: flex;
                align-items: center;
                gap: 10px;
                font-size: 1.5rem;
                font-weight: bold;
                color: #5C4B37;
            }
            
            .nav-user {
                display: flex;
                align-items: center;
                gap: 15px;
                color: #5C4B37;
            }
            
            .btn-logout {
                background: #A8C8B8;
                color: white;
                border: none;
                padding: 8px 16px;
                border-radius: 5px;
                cursor: pointer;
            }
            
            .dashboard {
                display: flex;
                min-height: calc(100vh - 70px);
            }
            
            .sidebar {
                width: 250px;
                background: #F8F4E9;
                border-right: 1px solid #E8D0B3;
                padding: 20px 0;
            }
            
            .sidebar-menu {
                display: flex;
                flex-direction: column;
                gap: 5px;
                padding: 0 15px;
            }
            
            .menu-item {
                display: flex;
                align-items: center;
                gap: 12px;
                padding: 15px;
                border: none;
                background: none;
                text-align: left;
                border-radius: 8px;
                cursor: pointer;
                color: #8A7E6F;
                transition: all 0.2s;
            }
            
            .menu-item:hover, .menu-item.active {
                background: #E8D0B3;
                color: #5C4B37;
            }
            
            .main-content {
                flex: 1;
                padding: 30px;
                background: #FDF8F0;
            }
            
            .content-section {
                display: none;
            }
            
            .content-section.active {
                display: block;
            }
            
            .welcome-card {
                background: #F8F4E9;
                border: 1px solid #E8D0B3;
                border-radius: 15px;
                padding: 30px;
                margin-bottom: 30px;
                text-align: center;
            }
            
            .welcome-card h1 {
                color: #5C4B37;
                margin-bottom: 10px;
            }
            
            .quick-actions h2 {
                color: #5C4B37;
                margin-bottom: 20px;
            }
            
            .action-grid {
                display: grid;
                grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
                gap: 20px;
            }
            
            .action-card {
                background: #F8F4E9;
                border: 1px solid #E8D0B3;
                border-radius: 12px;
                padding: 25px;
                text-align: center;
                cursor: pointer;
                transition: all 0.3s;
            }
            
            .action-card:hover {
                transform: translateY(-5px);
                background: #E8D0B3;
            }
            
            .action-icon {
                width: 60px;
                height: 60px;
                background: #D4A574;
                border-radius: 50%;
                display: flex;
                align-items: center;
                justify-content: center;
                margin: 0 auto 15px;
            }
            
            .action-icon i {
                font-size: 1.5rem;
                color: white;
            }
            
            .analysis-header {
                margin-bottom: 30px;
            }
            
            .analysis-header h2 {
                font-size: 1.8rem;
                color: #5C4B37;
                margin-bottom: 8px;
            }
            
            .upload-section {
                display: flex;
                gap: 30px;
                margin-bottom: 40px;
            }
            
            .upload-card, .preview-card {
                flex: 1;
                background: #F8F4E9;
                border: 2px dashed #E8D0B3;
                border-radius: 15px;
                padding: 40px;
                text-align: center;
                transition: all 0.3s ease;
            }
            
            .upload-card:hover {
                border-color: #D4A574;
            }
            
            .upload-icon i {
                font-size: 3rem;
                color: #D4A574;
                margin-bottom: 20px;
            }
            
            .btn-upload {
                background: #D4A574;
                color: #5C4B37;
                border: none;
                padding: 12px 30px;
                border-radius: 8px;
                font-size: 1rem;
                font-weight: 600;
                cursor: pointer;
            }
            
            .preview-card {
                border: 2px solid #E8D0B3;
                display: flex;
                flex-direction: column;
            }
            
            .preview-header {
                display: flex;
                justify-content: space-between;
                align-items: center;
                margin-bottom: 20px;
            }
            
            .preview-image img {
                max-width: 100%;
                max-height: 200px;
                border-radius: 8px;
            }
            
            .btn-analyze {
                background: #D4A574;
                color: #5C4B37;
                border: none;
                padding: 12px 25px;
                border-radius: 8px;
                font-size: 1rem;
                font-weight: 600;
                cursor: pointer;
                margin-top: 20px;
            }
            
            .result-section {
                background: #F8F4E9;
                border: 1px solid #E8D0B3;
                border-radius: 15px;
                padding: 30px;
            }
            
            .risk-level {
                display: flex;
                align-items: center;
                gap: 20px;
                padding: 20px;
                background: white;
                border-radius: 10px;
                margin-bottom: 25px;
            }
            
            .risk-icon i {
                font-size: 2.5rem;
            }
            
            .risk-level.normal .risk-icon i { color: #4CAF50; }
            .risk-level.warning .risk-icon i { color: #FF9800; }
            .risk-level.danger .risk-icon i { color: #F44336; }
            
            .result-details {
                display: grid;
                grid-template-columns: 1fr 1fr;
                gap: 25px;
                margin-bottom: 25px;
            }
            
            .detail-card, .recommendation-card {
                background: white;
                border: 1px solid #E8D0B3;
                border-radius: 10px;
                padding: 20px;
            }
            
            .detail-item {
                display: flex;
                justify-content: space-between;
                padding: 10px 0;
                border-bottom: 1px solid #E8D0B3;
            }
            
            .result-actions {
                display: flex;
                gap: 15px;
                justify-content: center;
            }
            
            .btn-save {
                background: #A8C8B8;
                color: white;
                border: none;
                padding: 12px 25px;
                border-radius: 8px;
            }
            
            .btn-new {
                background: #E8D0B3;
                color: #5C4B37;
                border: none;
                padding: 12px 25px;
                border-radius: 8px;
            }
            
            .hidden {
                display: none !important;
            }
            
            .loading {
                display: inline-block;
                width: 20px;
                height: 20px;
                border: 3px solid #f3f3f3;
                border-top: 3px solid #D4A574;
                border-radius: 50%;
                animation: spin 1s linear infinite;
            }
            
            @keyframes spin {
                0% { transform: rotate(0deg); }
                100% { transform: rotate(360deg); }
            }
            
            @media (max-width: 768px) {
                .dashboard {
                    flex-direction: column;
                }
                
                .sidebar {
                    width: 100%;
                    border-right: none;
                    border-bottom: 1px solid #E8D0B3;
                }
                
                .sidebar-menu {
                    flex-direction: row;
                    overflow-x: auto;
                }
                
                .upload-section {
                    flex-direction: column;
                }
                
                .result-details {
                    grid-template-columns: 1fr;
                }
            }
        </style>
    `;
    
    initHealthAnalysis();
}

function showSection(sectionName) {
    document.querySelectorAll('.content-section').forEach(section => {
        section.classList.remove('active');
    });
    
    document.querySelectorAll('.menu-item').forEach(item => {
        item.classList.remove('active');
    });
    
    document.getElementById(sectionName + '-section').classList.add('active');
    
    document.querySelectorAll('.menu-item').forEach(item => {
        if (item.textContent.includes(getSectionChineseName(sectionName))) {
            item.classList.add('active');
        }
    });
}

function getSectionChineseName(sectionName) {
    const names = {
        'home': '首页',
        'analysis': '健康分析',
        'cats': '我的猫咪',
        'history': '分析历史'
    };
    return names[sectionName] || sectionName;
}

let currentImageFile = null;

function initHealthAnalysis() {
    console.log("初始化健康分析功能");
    
    const uploadInput = document.getElementById('image-upload');
    if (uploadInput) {
        uploadInput.addEventListener('change', handleImageSelect);
    }
}

function handleImageSelect(event) {
    const file = event.target.files[0];
    if (!file) return;
    
    if (!file.type.startsWith('image/')) {
        alert('请选择图片文件！');
        return;
    }
    
    if (file.size > 5 * 1024 * 1024) {
        alert('图片大小不能超过5MB！');
        return;
    }
    
    currentImageFile = file;
    
    const reader = new FileReader();
    reader.onload = function(e) {
        document.getElementById('preview-img').src = e.target.result;
        document.getElementById('upload-area').classList.add('hidden');
        document.getElementById('preview-area').classList.remove('hidden');
    };
    reader.readAsDataURL(file);
}

function removeImage() {
    currentImageFile = null;
    document.getElementById('image-upload').value = '';
    document.getElementById('upload-area').classList.remove('hidden');
    document.getElementById('preview-area').classList.add('hidden');
    document.getElementById('result-area').classList.add('hidden');
}

async function analyzeImage() {
    if (!currentImageFile) {
        alert('请先选择图片！');
        return;
    }
    
    const analyzeBtn = document.querySelector('.btn-analyze');
    const originalText = analyzeBtn.innerHTML;
    
    try {
        analyzeBtn.innerHTML = '<span class="loading"></span> 分析中...';
        analyzeBtn.disabled = true;
        
        const base64Image = await fileToBase64(currentImageFile);
        
        const response = await fetch('/api/analysis/analyze', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
                'Authorization': 'Bearer ' + localStorage.getItem('token')
            },
            body: JSON.stringify({
                image: base64Image,
                timestamp: new Date().toISOString()
            })
        });
        
        if (!response.ok) {
            throw new Error('分析请求失败');
        }
        
        const result = await response.json();
        displayAnalysisResult(result);
        
    } catch (error) {
        console.error('分析错误:', error);
        alert('分析失败：' + error.message);
    } finally {
        analyzeBtn.innerHTML = originalText;
        analyzeBtn.disabled = false;
    }
}

function fileToBase64(file) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = () => resolve(reader.result);
        reader.onerror = error => reject(error);
    });
}

function displayAnalysisResult(result) {
    const resultArea = document.getElementById('result-area');
    const riskLevel = document.getElementById('risk-level');
    const riskTitle = document.getElementById('risk-title');
    const riskDesc = document.getElementById('risk-desc');
    
    riskLevel.className = 'risk-level ' + result.health_analysis.risk_level;
    
    riskTitle.textContent = result.health_analysis.message;
    riskDesc.textContent = result.health_analysis.description;
    
    document.getElementById('color-result').textContent = result.detection?.color || '未检测';
    document.getElementById('texture-result').textContent = result.detection?.texture || '未检测';
    document.getElementById('shape-result').textContent = result.detection?.shape || '未检测';
    document.getElementById('confidence-result').textContent = 
        result.health_analysis.confidence ? (result.health_analysis.confidence * 100).toFixed(1) + '%' : '-';
    
    document.getElementById('recommendation-content').innerHTML = 
        '<p>' + result.health_analysis.recommendation + '</p>';
    
    resultArea.classList.remove('hidden');
}

function saveAnalysis() {
    alert('保存功能开发中...');
}

function newAnalysis() {
    removeImage();
    document.getElementById('result-area').classList.add('hidden');
}

function logout() {
    localStorage.removeItem("token");
    localStorage.removeItem("user");
    location.reload();
}

function checkLoginStatus() {
    const token = localStorage.getItem("token");
    const userData = localStorage.getItem("user");
    
    if (token && userData) {
        try {
            const user = JSON.parse(userData);
            console.log("发现已登录用户:", user);
            showDashboard(user);
        } catch (error) {
            console.error("解析用户数据错误:", error);
            localStorage.removeItem("token");
            localStorage.removeItem("user");
        }
    }
}

function showMessage(message, type = "info") {
    clearMessages();
    
    const messageEl = document.createElement("div");
    messageEl.className = `message ${type}`;
    messageEl.textContent = message;
    messageEl.style.cssText = `
        padding: 12px 16px;
        border-radius: 8px;
        margin-bottom: 15px;
        text-align: center;
        font-weight: 500;
        background-color: ${type === "error" ? "#FFE8E6" : type === "success" ? "#E8F5E9" : "#E3F2FD"};
        color: ${type === "error" ? "#D8000C" : type === "success" ? "#2E7D32" : "#1565C0"};
        border: 1px solid ${type === "error" ? "#FFC6C6" : type === "success" ? "#C8E6C9" : "#BBDEFB"};
    `;
    
    const currentCard = document.querySelector(".app-card:not(.hidden)");
    if (currentCard) {
        const cardBody = currentCard.querySelector(".card-body");
        if (cardBody) {
            cardBody.insertBefore(messageEl, cardBody.firstChild);
        }
    }
}

function clearMessages() {
    const messages = document.querySelectorAll(".message");
    messages.forEach(msg => msg.remove());
}
// 图片压缩函数
function compressImage(file, quality = 0.7, maxWidth = 800) {
    return new Promise((resolve, reject) => {
        const reader = new FileReader();
        reader.readAsDataURL(file);
        reader.onload = (event) => {
            const img = new Image();
            img.src = event.target.result;
            img.onload = () => {
                const canvas = document.createElement('canvas');
                
                // 计算缩放比例
                let width = img.width;
                let height = img.height;
                
                if (width > maxWidth) {
                    height = (height * maxWidth) / width;
                    width = maxWidth;
                }
                
                canvas.width = width;
                canvas.height = height;
                
                const ctx = canvas.getContext('2d');
                ctx.drawImage(img, 0, 0, width, height);
                
                // 转换为压缩的base64
                const compressedBase64 = canvas.toDataURL('image/jpeg', quality);
                console.log(`图片压缩: ${img.width}x${img.height} -> ${width}x${height}, 质量: ${quality}`);
                resolve(compressedBase64);
            };
            img.onerror = reject;
        };
        reader.onerror = reject;
    });
}
