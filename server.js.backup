const express = require("express");
const path = require("path");

const app = express();
const PORT = 3000; // 使用标准端口

// 基础中间件
app.use(express.json());
app.use(express.static(path.join(__dirname, "backend", "public")));

// 基础路由
app.get("/", (req, res) => {
    res.sendFile(path.join(__dirname, "backend", "public", "index.html"));
});

app.get("/dashboard.html", (req, res) => {
    res.sendFile(path.join(__dirname, "backend", "public", "dashboard.html"));
});

// 调试接口
app.get("/api/debug/users", (req, res) => {
    res.json({
        success: true,
        users: [
            { id: 1, name: "测试用户", email: "test@example.com" },
            { id: 2, name: "Jiamin Pan", email: "jiaminpan4@gmail.com" }
        ]
    });
});

// 登录接口
app.post("/api/auth/login", (req, res) => {
    const { email, password } = req.body;
    console.log("登录请求:", email, password);
    
    if (email === "test@example.com" && password === "123456") {
        res.json({
            success: true,
            message: "登录成功",
            token: "mock-token",
            user: { id: 1, name: "测试用户", email: "test@example.com" }
        });
    } else if (email === "jiaminpan4@gmail.com" && password === "123456") {
        res.json({
            success: true,
            message: "登录成功", 
            token: "mock-token",
            user: { id: 2, name: "Jiamin Pan", email: "jiaminpan4@gmail.com" }
        });
    } else {
        res.status(401).json({
            success: false,
            error: "邮箱或密码错误"
        });
    }
});

// 启动服务器
app.listen(PORT, () => {
    console.log(" CatHealth Monitor 服务器启动成功！");
    console.log(" 访问地址: http://localhost:" + PORT);
    console.log(" 启动时间:", new Date().toLocaleString());
    console.log("");
    console.log(" 测试账户:");
    console.log("  邮箱: test@example.com, 密码: 123456");
    console.log("  邮箱: jiaminpan4@gmail.com, 密码: 123456");
});

// 错误处理
process.on("uncaughtException", (err) => {
    console.error("未捕获的异常:", err);
});

process.on("unhandledRejection", (reason, promise) => {
    console.error("未处理的Promise拒绝:", reason);
});
